import pandas as pd
from sqlalchemy import create_engine
import schedule
import time

# === 1. MySQL Configuration ===
user = 'root'
password = '1234'
host = 'localhost'
port = '3306'

raw_db = 'JnJSourcing'
clean_db = 'JSourcingCleanData'

raw_engine = create_engine(f"mysql+pymysql://{user}:{password}@{host}:{port}/{raw_db}")
clean_engine = create_engine(f"mysql+pymysql://{user}:{password}@{host}:{port}/{clean_db}")

def clean_dataframe(df):
    df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)
    df.replace('', pd.NA, inplace=True)
    df.dropna(inplace=True)
    return df

def create_empty_tables(clean_table, agg_table, raw_table):
    # Define empty DataFrames with expected columns per table
    if raw_table == 'Supplier_Information_Raw':
        empty_clean_df = pd.DataFrame(columns=['SupplierID', 'SupplierName', 'Country', 'OtherColumns...'])  # adjust columns
        empty_agg_df = pd.DataFrame(columns=['Country', 'SupplierCount'])
    elif raw_table == 'Supplier_Performance_Raw':
        empty_clean_df = pd.DataFrame(columns=['PerformanceID', 'SupplierID', 'QualityScore', 'OtherColumns...'])
        empty_agg_df = pd.DataFrame(columns=['SupplierID', 'AvgQualityScore'])
    elif raw_table == 'Sourcing_Contracts_Raw':
        empty_clean_df = pd.DataFrame(columns=['ContractID', 'SupplierID', 'ContractValue', 'OtherColumns...'])
        empty_agg_df = pd.DataFrame(columns=['SupplierID', 'TotalContractValue'])
    elif raw_table == 'Purchase_Orders_Raw':
        empty_clean_df = pd.DataFrame(columns=['PO_ID', 'Currency', 'Total_Amount', 'OtherColumns...'])
        empty_agg_df = pd.DataFrame(columns=['Currency', 'TotalSpend'])
    elif raw_table == 'Purchase_Order_Details_Raw':
        empty_clean_df = pd.DataFrame(columns=['PODetailID', 'ItemID', 'Quantity', 'OtherColumns...'])
        empty_agg_df = pd.DataFrame(columns=['ItemID', 'TotalQuantity'])
    elif raw_table == 'Spend_Analysis_Raw':
        empty_clean_df = pd.DataFrame(columns=['SpendID', 'Category', 'Amount_Spend', 'OtherColumns...'])
        empty_agg_df = pd.DataFrame(columns=['Category', 'TotalSpend'])
    else:
        empty_clean_df = pd.DataFrame()
        empty_agg_df = pd.DataFrame()

    empty_clean_df.to_sql(clean_table, clean_engine, if_exists='replace', index=False)
    empty_agg_df.to_sql(agg_table, clean_engine, if_exists='replace', index=False)
    print(f"‚ö†Ô∏è Created empty `{clean_table}` and `{agg_table}` tables because raw table `{raw_table}` does not exist.")

def etl_clean_and_sync():
    print("\nüîÑ Starting ETL clean and sync of all raw tables...")

    table_configs = {
        'Supplier_Information_Raw': ('SupplierID', 'Supplier_Information', 'Agg_SupplierCountByCountry'),
        'Supplier_Performance_Raw': ('PerformanceID', 'Supplier_Performance', 'Agg_AvgQualityScoreBySupplier'),
        'Sourcing_Contracts_Raw': ('ContractID', 'Sourcing_Contracts', 'Agg_TotalContractValueBySupplier'),
        'Purchase_Orders_Raw': ('PO_ID', 'Purchase_Orders', 'Agg_TotalSpendByCurrency'),
        'Purchase_Order_Details_Raw': ('PODetailID', 'Purchase_Order_Details', 'Agg_TotalQuantityByItem'),
        'Spend_Analysis_Raw': ('SpendID', 'Spend_Analysis', 'Agg_TotalSpendByCategory')
    }

    for raw_table, (id_col, clean_table, agg_table) in table_configs.items():
        try:
            print(f"\nüì• Processing `{raw_table}`...")
            df = pd.read_sql(f"SELECT * FROM {raw_table}", raw_engine)
            df = clean_dataframe(df)

            if df.empty:
                print(f"‚ö†Ô∏è Raw table `{raw_table}` is empty. Creating empty clean and aggregate tables.")
                create_empty_tables(clean_table, agg_table, raw_table)
                continue

            # Table-specific cleaning & aggregation
            if raw_table == 'Supplier_Information_Raw':
                df['Country'] = df['Country'].str.title()
                agg = df.groupby('Country')['SupplierID'].nunique().reset_index(name='SupplierCount')

            elif raw_table == 'Supplier_Performance_Raw':
                df['QualityScore'] = pd.to_numeric(df['QualityScore'], errors='coerce')
                agg = df.groupby('SupplierID')['QualityScore'].mean().reset_index(name='AvgQualityScore')

            elif raw_table == 'Sourcing_Contracts_Raw':
                df['ContractValue'] = pd.to_numeric(df['ContractValue'], errors='coerce')
                agg = df.groupby('SupplierID')['ContractValue'].sum().reset_index(name='TotalContractValue')

            elif raw_table == 'Purchase_Orders_Raw':
                df['Currency'] = df['Currency'].str.upper()
                df['Total_Amount'] = pd.to_numeric(df['Total_Amount'], errors='coerce')
                agg = df.groupby('Currency')['Total_Amount'].sum().reset_index(name='TotalSpend')

            elif raw_table == 'Purchase_Order_Details_Raw':
                df['Quantity'] = pd.to_numeric(df['Quantity'], errors='coerce')
                agg = df.groupby('ItemID')['Quantity'].sum().reset_index(name='TotalQuantity')

            elif raw_table == 'Spend_Analysis_Raw':
                df['Category'] = df['Category'].str.title()
                df['Amount_Spend'] = pd.to_numeric(df['Amount_Spend'], errors='coerce')
                agg = df.groupby('Category')['Amount_Spend'].sum().reset_index(name='TotalSpend')

            else:
                agg = pd.DataFrame()

            # Write cleaned and aggregated data to clean DB
            df.to_sql(clean_table, clean_engine, if_exists='replace', index=False)
            print(f"‚úÖ Cleaned data written to `{clean_table}` ({len(df)} rows)")

            agg.to_sql(agg_table, clean_engine, if_exists='replace', index=False)
            print(f"üìä Aggregated data written to `{agg_table}`")

        except Exception as e:
            # Handle missing raw table or other errors by creating empty clean tables
            if "doesn't exist" in str(e):
                print(f"‚ùå Raw table `{raw_table}` does not exist.")
                create_empty_tables(clean_table, agg_table, raw_table)
            else:
                print(f"‚ùå Error processing `{raw_table}`: {e}")
                # Optional: drop clean tables to keep DB consistent
                try:
                    with clean_engine.connect() as conn:
                        conn.execute(f"DROP TABLE IF EXISTS {clean_table}")
                        conn.execute(f"DROP TABLE IF EXISTS {agg_table}")
                    print(f"‚ö†Ô∏è Dropped `{clean_table}` and `{agg_table}` due to error.")
                except Exception as drop_err:
                    print(f"‚ùå Failed to drop clean tables `{clean_table}` or `{agg_table}`: {drop_err}")

    print("\n‚úÖ ETL completed for all tables.")

# Schedule ETL every 5 minutes (adjust as needed)
schedule.every(1).seconds.do(etl_clean_and_sync)

# Run once immediately on startup
etl_clean_and_sync()

print("üîÅ ETL is running. It will repeat every 5 minutes. (Press Ctrl+C to stop)")
while True:
    schedule.run_pending()
    time.sleep(1)
